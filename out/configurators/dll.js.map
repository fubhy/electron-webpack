{"version":3,"file":"dll.js","sourceRoot":"","sources":["../../src/configurators/dll.ts"],"names":[],"mappings":";;;;;;;;;;;;;;oEAMO,AAAK,WAAuB,AAAiC;AAClE,YAAI,AAAW,cAAkB,AAAI;AACrC,cAAM,AAAU,aAAG,AAAY,aAAC,AAAU;AAE1C,AAAE,AAAC,YAAC,AAAY,aAAC,AAAI,SAAK,AAAc,AAAC,gBAAC,AAAC;AACzC,kBAAM,AAAG,MAAG,AAAY,aAAC,AAA4B,6BAAC,AAAU,SAAC,AAAG;AACpE,AAAE,AAAC,gBAAC,AAAG,OAAI,AAAI,AAAC,MAAC,AAAC;AAChB,sBAAM,IAAI,AAAK,AAAC,MAAyC,AAAC,AAC5D;AAAC;AAED,AAAY,yBAAC,AAAM,OAAC,AAAK,QAAG,AAAK,MAAC,AAAO,QAAC,AAAG,AAAC,AAAC,AAAC,OAAC,EAAC,AAAM,QAAE,AAAG,AAAC,AAAC,AAAC,QAAC,AAAG;AAEpE,AAAW,0BAAG,AAAI,MAAC,AAAI,KAAC,AAAY,aAAC,AAAmB,qBAAE,AAAY,aAAC,AAAI,MAAE,AAAe,AAAC;AAC7F,AAAY,yBAAC,AAAO,QAAC,AAAI;AACvB,AAAI,sBAAE,AAAQ;AACd,AAAI,sBAAE,AAAW;AACjB,AAAO,yBAAE,AAAU,AACpB,AAAC,AAAC;AAJqC,aAAd,AAAI,AAAS;AAMvC,kBAAM,AAAM,SAAG,AAAY,aAAC,AAAM,OAAC,AAAO;AAC1C,AAAyB;AACzB,mBAAO,AAAM,OAAC,AAAa;AAC3B,AAAM,mBAAC,AAAO,UAAG,AAAQ,AAC3B;AAAC,AACD,AAAI,eAAC,AAAE,AAAC,IAAC,AAAY,aAAC,AAAI,SAAK,AAAU,AAAC,YAAC,AAAC;AAC1C,kBAAM,AAAM,SAAG,AAAI,MAAC,AAAI,KAAC,AAAY,aAAC,AAAmB,qBAAE,AAAc,AAAC;AAC1E,kBAAM,AAAO,UAAG,MAAM,AAAU,wCAAC,AAAM,AAAC;AACxC,AAAE,AAAC,gBAAC,AAAO,WAAI,AAAI,QAAI,CAAC,AAAO,QAAC,AAAW,AAAE,AAAC,eAAC,AAAC;AAC9C,AAAY,6BAAC,AAAK,MAAC,AAAkB,AAAC;AACtC,AAAM,uBAAC,AAAI,AACb;AAAC;AAED,AAAY,yBAAC,AAAK,AAAC,wBAAkB,AAAM,MAAE,AAAC;AAC9C,AAAY,yBAAC,AAAO,QAAC,AAAI;AACvB,AAAO,yBAAE,AAAU;AACnB,AAAQ,0BAAE,MAAM,AAAQ,8CAAC,AAAI,MAAC,AAAI,KAAC,AAAM,QAAE,AAAe,AAAC,AAAC,AAC7D,AAAC,AAAC,AACL;AAJmD,aAAvB,AAAI,AAAkB;AAIjD;AAED,AAAM,eAAC,AAAW,AACpB;AAAC,AAED,AAAM;;;;;;;;qEAAC,AAAK,WAAuB,AAAc,QAAE,AAAiC;AAClF,AAAE,AAAC,YAAC,AAAY,aAAC,AAA4B,6BAAC,AAAU,SAAC,AAAG,OAAI,AAAI,AAAC,MAAC,AAAC;AACrE,AAAM,mBAAC,AAAE,AACX;AAAC;AAED,cAAM,AAAK,QAAG,MAAM,AAAoB,kDAAC,AAAO,6CAAC,AAAM,AAAC,AAAC;AACzD,AAAM,eAAC,AAAK,SAAI,AAAI,AAAC,AAAC,OAAC,AAAE,AAAC,AAAC,WAAO,AAAM;AAAC,AAAE,AAAC,AAAE,mBAAC,AAAE,GAAC,AAAQ,SAAC,AAAK,AAAC,UAAI,AAAE,GAAC,AAAQ,SAAC,AAAM,AAAC,AAAC;SAA7D,AAAK,EAAyD,AAAI,AAAE,AAClG;AAAC;;;;;;;;;;;AAvDD,AAAO,AAAE,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;AAC9C,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAS,AAAE,AAAkB,AAAE,AAAM,AAAS;;;;;;AAEvD,AAAO,AAAE,AAAoB,AAAE,AAAU,AAAE,AAAM,AAAS,AAE1D,AAAM","sourcesContent":["import { readdir, readJson } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { DllPlugin, DllReferencePlugin } from \"webpack\"\nimport { WebpackConfigurator } from \"../main\"\nimport { orNullIfFileNotExist, statOrNull } from \"../util\"\n\nexport async function configureDll(configurator: WebpackConfigurator): Promise<string | null> {\n  let dllManifest: string | null = null\n  const projectDir = configurator.projectDir\n\n  if (configurator.type === \"renderer-dll\") {\n    const dll = configurator.electronWebpackConfiguration.renderer!!.dll\n    if (dll == null) {\n      throw new Error(`renderer-dll requires DLL configuration`)\n    }\n\n    configurator.config.entry = Array.isArray(dll) ? {vendor: dll} : dll\n\n    dllManifest = path.join(configurator.commonDistDirectory, configurator.type, \"manifest.json\")\n    configurator.plugins.push(new DllPlugin({\n      name: \"[name]\",\n      path: dllManifest,\n      context: projectDir,\n    }))\n\n    const output = configurator.config.output!\n    // leave as default \"var\"\n    delete output.libraryTarget\n    output.library = \"[name]\"\n  }\n  else if (configurator.type === \"renderer\") {\n    const dllDir = path.join(configurator.commonDistDirectory, \"renderer-dll\")\n    const dirStat = await statOrNull(dllDir)\n    if (dirStat == null || !dirStat.isDirectory()) {\n      configurator.debug(\"No DLL directory\")\n      return null\n    }\n\n    configurator.debug(`DLL directory: ${dllDir}`)\n    configurator.plugins.push(new DllReferencePlugin({\n      context: projectDir,\n      manifest: await readJson(path.join(dllDir, \"manifest.json\")),\n    }))\n  }\n\n  return dllManifest\n}\n\nexport async function getDllAssets(dllDir: string, configurator: WebpackConfigurator) {\n  if (configurator.electronWebpackConfiguration.renderer!!.dll == null) {\n    return []\n  }\n\n  const files = await orNullIfFileNotExist(readdir(dllDir))\n  return files == null ? [] : files.filter(it => it.endsWith(\".js\") || it.endsWith(\".css\")).sort()\n}"]}
