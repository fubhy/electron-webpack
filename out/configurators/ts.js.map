{"version":3,"file":"ts.js","sourceRoot":"","sources":["../../src/configurators/ts.ts"],"names":[],"mappings":";;;;;;;;;;;;;;oEAIO,AAAK,WAA8B,AAAiC;AACzE,cAAM,AAAY,eAAG,AAAY,aAAC,AAAgB,iBAAC,AAAgC,AAAC,qCAAI,AAAY,aAAC,AAAgB,iBAAC,AAAqB,AAAC;AAC5I,AAAE,AAAC,YAAC,AAAC,EAAC,AAAY,gBAAI,AAAY,aAAC,AAAgB,iBAAC,AAAW,AAAC,AAAC,AAAC,eAAC,AAAC;AAClE,AAAM,AACR;AAAC;AAED,AAAe;AACf,AAAY,qBAAC,AAAU,WAAC,AAAM,OAAC,AAAC,GAAE,AAAC,GAAE,AAAK,OAAE,AAAM,AAAC;AAEnD,cAAM,AAAe,kBAAG,AAAY,aAAC,AAAM,AAAI,UAAC,AAAY,gBAAI,CAAC,AAAY,aAAC,AAAY,AAAC;AAE3F,cAAM,AAAY,eAAG,MAAM,AAAoB,kDAAC,CAAC,AAAI,MAAC,AAAI,KAAC,AAAY,aAAC,AAAS,WAAE,AAAe,AAAC,kBAAE,AAAI,MAAC,AAAI,KAAC,AAAY,aAAC,AAAU,YAAE,AAAe,AAAC,AAAC,mBAAE,AAAI,AAAC;AAChK,AAA2D;AAC3D,AAAE,AAAC,YAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AACzB,kBAAM,IAAI,AAAK,AAAC,6CAAuC,AAAY,aAAC,AAAU,UAAmF,AAAC,AACpK;AAAC;AAED,AAAE,AAAC,YAAC,AAAY,aAAC,AAAK,MAAC,AAAO,AAAC,SAAC,AAAC;AAC/B,AAAY,yBAAC,AAAK,AAAC,eAAS,AAAY,YAAE,AAAC,AAC7C;AAAC;AAED,AAAsE;AACtE,AAAE,AAAC,YAAC,AAAe,mBAAI,CAAC,AAAY,aAAC,AAAM,AAAC,QAAC,AAAC;AAC5C,kBAAM,AAA0B,6BAAG,AAAO,QAAC,AAAgC,AAAC;AAC5E,AAAY,yBAAC,AAAO,QAAC,AAAI,SAAK,AAA0B;AACtD,AAAQ,0BAAE,AAAY;AACtB,AAAM,wBAAE,AAAY,aAAC,AAAG,IAAC,AAAmB;AAC1C,AAAI,0BAAE,AAAG,AAAE;AACT,AAAS,AACX;AAAC;AAED,AAAI,0BAAE,AAAO,QAAC,AAAI,KAAC,AAAI,KAAC,AAAO,AAAC;AAChC,AAAK,2BAAE,AAAO,QAAC,AAAK,MAAC,AAAI,KAAC,AAAO,AAAC,AACnC,AACF,AAAC,AAAC,AACL;AAToD;AAFO,aAA/B;AAW3B;AAED,cAAM,AAAe;AACnB,AAAiD;AACjD,AAAwE;AACxE,AAAa,2BAAE,AAAe;AAC9B,AAAgB,8BAAE,CAAC,AAAQ,AAAC;AAC5B,AAAU,wBAAE,AAAY,AACzB;AAN4B;AAQ7B,AAAE,AAAC,YAAC,AAAY,aAAC,AAAK,MAAC,AAAO,AAAC,SAAC,AAAC;AAC/B,AAAY,yBAAC,AAAK,AAAC,4BAAsB,AAAI,KAAC,AAAS,UAAC,AAAe,iBAAE,AAAI,MAAE,AAAC,AAAC,EAAE,AAAC,AACtF;AAAC;AAED,AAAY,qBAAC,AAAK,MAAC,AAAI;AACrB,AAAI,kBAAE,AAAS;AACf,AAAO,qBAAE,AAAc;AACvB,AAAG;AAEC,AAAM,wBAAE,AAAW;AACnB,AAAO,yBAAE,AAAe,AACzB,AACF,AACF,AAAC,AACJ;AANM,aADG;AAHiB;AAUzB;;;;;;;;;AA/DD,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAE5B,AAAO,AAAE,AAAoB,AAAE,AAAM,AAAS,AAE9C,AAAM","sourcesContent":["import * as path from \"path\"\nimport { WebpackConfigurator } from \"../main\"\nimport { getFirstExistingFile } from \"../util\"\n\nexport async function configureTypescript(configurator: WebpackConfigurator) {\n  const hasTsChecker = configurator.hasDevDependency(\"fork-ts-checker-webpack-plugin\") || configurator.hasDevDependency(\"electron-webpack-ts\")\n  if (!(hasTsChecker || configurator.hasDevDependency(\"ts-loader\"))) {\n    return\n  }\n\n  // add after js\n  configurator.extensions.splice(1, 0, \".ts\", \".tsx\")\n\n  const isTranspileOnly = configurator.isTest || (hasTsChecker && !configurator.isProduction)\n\n  const tsConfigFile = await getFirstExistingFile([path.join(configurator.sourceDir, \"tsconfig.json\"), path.join(configurator.projectDir, \"tsconfig.json\")], null)\n  // check to produce clear error message if no tsconfig.json\n  if (tsConfigFile == null) {\n    throw new Error(`Please create tsconfig.json in the \"${configurator.projectDir}\":\\n\\n{\\n  \"extends\": \"./node_modules/electron-webpack/tsconfig-base.json\"\\n}\\n\\n`)\n  }\n\n  if (configurator.debug.enabled) {\n    configurator.debug(`Using ${tsConfigFile}`)\n  }\n\n  // no sense to use fork-ts-checker-webpack-plugin for production build\n  if (isTranspileOnly && !configurator.isTest) {\n    const ForkTsCheckerWebpackPlugin = require(\"fork-ts-checker-webpack-plugin\")\n    configurator.plugins.push(new ForkTsCheckerWebpackPlugin({\n      tsconfig: tsConfigFile,\n      logger: configurator.env.forkTsCheckerLogger || {\n        info: () => {\n          // ignore\n        },\n\n        warn: console.warn.bind(console),\n        error: console.error.bind(console),\n      }\n    }))\n  }\n\n  const tsLoaderOptions: any = {\n    // use transpileOnly mode to speed-up compilation\n    // in the test mode also, because checked during dev or production build\n    transpileOnly: isTranspileOnly,\n    appendTsSuffixTo: [/\\.vue$/],\n    configFile: tsConfigFile,\n  }\n\n  if (configurator.debug.enabled) {\n    configurator.debug(`ts-loader options: ${JSON.stringify(tsLoaderOptions, null, 2)}`)\n  }\n\n  configurator.rules.push({\n    test: /\\.tsx?$/,\n    exclude: /node_modules/,\n    use: [\n      {\n        loader: \"ts-loader\",\n        options: tsLoaderOptions\n      },\n    ],\n  })\n}"]}
