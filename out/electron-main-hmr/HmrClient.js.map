{"version":3,"file":"HmrClient.js","sourceRoot":"","sources":["../../src/electron-main-hmr/HmrClient.ts"],"names":[],"mappings":"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","sourcesContent":["import Crocket from \"crocket\"\n\nconst debug = require(\"debug\")(\"electron-webpack:main-client-hmr\")\n\ninterface BuiltMessage {\n  hash: string\n}\n\nexport class HmrClient {\n  lastHash: string | null = null\n\n  private readonly ipc = new Crocket()\n\n  constructor(socketPath: string, private hot: __WebpackModuleApi.Hot, private readonly currentHashGetter: () => string) {\n    if (hot == null) {\n      throw new Error(`[HMR] Hot Module Replacement is disabled.`)\n    }\n\n    this.ipc.connect({path: socketPath}, error => {\n      if (error != null) {\n        console.error(error.stack || error.toString())\n      }\n      if (debug.enabled) {\n        debug(`Connected to server (${socketPath})`)\n      }\n    })\n\n    this.ipc.on<Error>(\"error\", error => {\n      console.error(error.stack || error.toString())\n    })\n\n    this.ipc.on<BuiltMessage>(\"/built\", data => {\n      this.lastHash = data.hash\n      if (this.isUpToDate()) {\n        if (debug.enabled) {\n          debug(`Up to date, hash ${data.hash}`)\n        }\n        return\n      }\n\n      const status = hot.status()\n      if (status === \"idle\") {\n        this.check()\n      }\n      else if (status === \"abort\" || status === \"fail\") {\n        console.warn(`[HMR] Cannot apply update as a previous update ${status}ed. Need to do a full reload!`)\n      }\n      else if (debug.enabled) {\n        debug(`Cannot check changes, status ${status}`)\n      }\n    })\n  }\n\n  private isUpToDate() {\n    return this.lastHash === this.currentHashGetter()\n  }\n\n  private check() {\n    this.hot.check(true)\n      .then(outdatedModules => {\n        if (outdatedModules == null) {\n          console.warn(`[HMR] Cannot find update. Need to do a full reload!`)\n          console.warn(`[HMR] (Probably because of restarting the webpack-dev-server)`)\n          return\n        }\n\n        require(\"webpack/hot/log-apply-result\")(outdatedModules, outdatedModules)\n\n        if (this.isUpToDate()) {\n          console.log(`[HMR] App is up to date.`)\n        }\n      })\n      .catch(error => {\n        const status = this.hot.status()\n        if (status === \"abort\" || status === \"fail\") {\n          console.warn(`[HMR] ${error.stack || error.toString()}`)\n          console.warn(\"[HMR] Cannot apply update. Need to do a full reload - application will be restarted\")\n          require(\"electron\").app.exit(100)\n        }\n        else {\n          console.warn(`[HMR] Update failed: ${error.stack || error.message}`)\n        }\n      })\n  }\n}"]}
