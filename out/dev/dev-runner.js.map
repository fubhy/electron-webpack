{"version":3,"file":"dev-runner.js","sourceRoot":"","sources":["../../src/dev/dev-runner.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport chalk from \"chalk\"\nimport { spawn } from \"child_process\"\nimport { readdir, remove } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport \"source-map-support/register\"\nimport webpack, { Compiler } from \"webpack\"\nimport { HmrServer } from \"../electron-main-hmr/HmrServer\"\nimport { configure } from \"../main\"\nimport { getFreePort, orNullIfFileNotExist } from \"../util\"\nimport { DelayedFunction, getCommonEnv, logError, logProcess, logProcessErrorOutput } from \"./devUtil\"\nimport { startRenderer } from \"./WebpackDevServerManager\"\n\nconst projectDir = process.cwd()\n\nlet socketPath: string | null = null\n\nconst debug = require(\"debug\")(\"electron-webpack\")\n\n// do not remove main.js to allow IDE to keep breakpoints\nasync function emptyMainOutput() {\n  const outDir = path.join(projectDir, \"dist\", \"main\")\n  const files = await orNullIfFileNotExist(readdir(outDir))\n  if (files == null) {\n    return\n  }\n\n  await BluebirdPromise.map(files.filter(it => !it.startsWith(\".\") && it !== \"main.js\"), it => remove(outDir + path.sep + it))\n}\n\nclass DevRunner {\n  async start() {\n    const wdsHost = \"localhost\"\n    const wdsPort = await getFreePort(wdsHost, 9080)\n    const env = {\n      ...getCommonEnv(),\n      ELECTRON_WEBPACK_WDS_HOST: wdsHost,\n      ELECTRON_WEBPACK_WDS_PORT: wdsPort,\n    }\n\n    const hmrServer = new HmrServer()\n    await BluebirdPromise.all([\n      startRenderer(projectDir, env),\n      hmrServer.listen()\n        .then(it => {\n          socketPath = it\n        }),\n      emptyMainOutput()\n        .then(() => this.startMainCompilation(hmrServer)),\n    ])\n\n    hmrServer.ipc.on(\"error\", (error: Error) => {\n      logError(\"Main\", error)\n    })\n\n    const electronArgs = process.env.ELECTRON_ARGS\n    const args = electronArgs != null && electronArgs.length > 0 ? JSON.parse(electronArgs) : [`--inspect=${await getFreePort(\"127.0.0.1\", 5858)}`]\n    args.push(path.join(projectDir, \"dist/main/main.js\"))\n    // we should start only when both start and main are started\n    startElectron(args, env)\n  }\n\n  async startMainCompilation(hmrServer: HmrServer) {\n    const mainConfig = await configure(\"main\", {\n      production: false,\n      autoClean: false,\n      forkTsCheckerLogger: {\n        info: () => {\n          // ignore\n        },\n\n        warn: (message: string) => {\n          logProcess(\"Main\", message, chalk.yellow)\n        },\n\n        error: (message: string) => {\n          logProcess(\"Main\", message, chalk.red)\n        },\n      },\n    })\n\n    await new BluebirdPromise((resolve: (() => void) | null, reject: ((error: Error) => void) | null) => {\n      const compiler: Compiler = webpack(mainConfig!!)\n\n      const printCompilingMessage = new DelayedFunction(() => {\n        logProcess(\"Main\", \"Compiling...\", chalk.yellow)\n      })\n      compiler.plugin(\"compile\", () => {\n        hmrServer.beforeCompile()\n        printCompilingMessage.schedule()\n      })\n\n      let watcher: Compiler.Watching | null = compiler.watch({}, (error, stats) => {\n        printCompilingMessage.cancel()\n\n        if (watcher == null) {\n          return\n        }\n\n        if (error != null) {\n          if (reject == null) {\n            logError(\"Main\", error)\n          }\n          else {\n            reject(error)\n            reject = null\n          }\n          return\n        }\n\n        logProcess(\"Main\", stats.toString({\n          colors: true,\n        }), chalk.yellow)\n\n        if (resolve != null) {\n          resolve()\n          resolve = null\n          return\n        }\n\n        hmrServer.built(stats)\n      })\n\n      require(\"async-exit-hook\")((callback: () => void) => {\n        debug(`async-exit-hook: ${callback == null}`)\n        const w = watcher\n        if (w == null) {\n          return\n        }\n\n        watcher = null\n        w.close(() => callback())\n      })\n    })\n  }\n}\n\nasync function main() {\n  const devRunner = new DevRunner()\n  await devRunner.start()\n}\n\nmain()\n  .catch(error => {\n    console.error(error)\n  })\n\nfunction startElectron(electronArgs: Array<string>, env: any) {\n  const electronProcess = spawn(require(\"electron\").toString(), electronArgs, {\n    env: {\n      ...env,\n      ELECTRON_HMR_SOCKET_PATH: socketPath,\n    }\n  })\n\n  // required on windows\n  require(\"async-exit-hook\")(() => {\n    electronProcess.kill(\"SIGINT\")\n  })\n\n  let queuedData: string | null = null\n  electronProcess.stdout.on(\"data\", data => {\n    data = data.toString()\n    // do not print the only line - doesn't make sense\n    if (data.trim() === \"[HMR] Updated modules:\") {\n      queuedData = data\n      return\n    }\n\n    if (queuedData != null) {\n      data = queuedData + data\n      queuedData = null\n    }\n\n    logProcess(\"Electron\", data, chalk.blue)\n  })\n\n  logProcessErrorOutput(\"Electron\", electronProcess)\n\n  electronProcess.on(\"close\", exitCode => {\n    debug(`Electron exited with exit code ${exitCode}`)\n    if (exitCode === 100) {\n      setImmediate(() => {\n        startElectron(electronArgs, env)\n      })\n    }\n    else {\n      (process as any).emit(\"message\", \"shutdown\")\n    }\n  })\n}"]}
