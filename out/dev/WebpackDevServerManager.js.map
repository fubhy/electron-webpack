{"version":3,"file":"WebpackDevServerManager.js","sourceRoot":"","sources":["../../src/dev/WebpackDevServerManager.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport chalk from \"chalk\"\nimport { ChildProcess } from \"child_process\"\nimport * as path from \"path\"\nimport { createConfigurator } from \"../main\"\nimport { statOrNull } from \"../util\"\nimport { ChildProcessManager, PromiseNotifier, run } from \"./ChildProcessManager\"\nimport { LineFilter, logError, logProcess, logProcessErrorOutput } from \"./devUtil\"\n\nconst debug = require(\"debug\")(\"electron-webpack\")\n\nfunction runWds(projectDir: string, env: any) {\n  const isWin = process.platform === \"win32\"\n  const webpackDevServerPath = path.join(projectDir, \"node_modules\", \".bin\", \"webpack-dev-server\" + (isWin ? \".cmd\" : \"\"))\n  debug(`Start renderer WDS ${webpackDevServerPath} on ${env.ELECTRON_WEBPACK_WDS_PORT} port`)\n  return run(webpackDevServerPath, [\"--color\", \"--env.autoClean=false\", \"--config\", path.join(__dirname, \"../../webpack.renderer.config.js\")], {\n    env,\n    cwd: projectDir,\n  })\n}\n\n// 1. in another process to speedup compilation\n// 2. some loaders detect webpack-dev-server hot mode only if run as CLI\nexport async function startRenderer(projectDir: string, env: any) {\n  const webpackConfigurator = await createConfigurator(\"renderer\", {production: false, configuration: {projectDir}})\n  const sourceDir = webpackConfigurator.sourceDir\n  // explicitly set to null - do not handle at all and do not show info message\n  if (sourceDir === null) {\n    return\n  }\n\n  const dirStat = await statOrNull(sourceDir)\n  if (dirStat == null || !dirStat.isDirectory()) {\n    logProcess(\"Renderer\", `No renderer source directory (${path.relative(projectDir, sourceDir)})`, chalk.blue)\n    return\n  }\n\n  if (webpackConfigurator.hasDependency(\"electron-next\")) {\n    debug(`Renderer WDS is not started - there is electron-next dependency`)\n    return\n  }\n\n  const lineFilter = new CompoundRendererLineFilter([\n    new OneTimeLineFilter(\"Project is running at \"),\n    new OneTimeLineFilter(\"webpack output is served from \"),\n  ])\n  return await new BluebirdPromise((resolve: (() => void) | null, reject: ((error: Error) => void) | null) => {\n    let devServerProcess: ChildProcess | null\n    try {\n      devServerProcess = runWds(projectDir, env)\n    }\n    catch (e) {\n      reject!(e)\n      return\n    }\n\n    //tslint:disable-next-line:no-unused-expression\n    new ChildProcessManager(devServerProcess, \"Renderer WDS\", new PromiseNotifier(resolve, reject))\n    devServerProcess.on(\"error\", error => {\n      if (reject == null) {\n        logError(\"Renderer\", error)\n      }\n      else {\n        reject(error)\n        reject = null\n      }\n    })\n\n    devServerProcess.stdout.on(\"data\", (data: string) => {\n      logProcess(\"Renderer\", data, chalk.blue, lineFilter)\n\n      const r = resolve\n      // we must resolve only after compilation, otherwise devtools disconnected\n      if (r != null && data.includes(\"webpack: Compiled successfully.\")) {\n        resolve = null\n        r()\n      }\n    })\n\n    logProcessErrorOutput(\"Renderer\", devServerProcess)\n  })\n}\n\nclass OneTimeLineFilter implements LineFilter {\n  private filtered = false\n\n  constructor(private readonly prefix: string) {\n  }\n\n  filter(line: string) {\n    if (!this.filtered && line.startsWith(this.prefix)) {\n      this.filtered = true\n      return false\n\n    }\n    return true\n  }\n}\n\nclass CompoundRendererLineFilter implements LineFilter {\n  constructor(private readonly filters: Array<LineFilter>) {\n  }\n\n  filter(line: string) {\n    return !this.filters.some(it => !it.filter(line))\n  }\n}"]}
