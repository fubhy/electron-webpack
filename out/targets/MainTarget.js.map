{"version":3,"file":"MainTarget.js","sourceRoot":"","sources":["../../src/targets/MainTarget.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAY,AAAE,AAAY,AAAE,AAAM,AAAS;;;;;;AAEpD,AAAO,AAAE,AAAoB,AAAE,AAAM,AAAS;;;;;;AAC9C,AAAO,AAAE,AAAU,AAAE,AAAmB,AAAE,AAAM,AAAc,AAE9D,AAAM;;;;;;MAAkB,AAAQ,AAAU;AACxC;AACE,AAAK,AAAE,AACT;AAAC;AAED,AAAc,mBAAC,AAAiC;AAC9C,AAAK,cAAC,AAAc,eAAC,AAAY,AAAC;AAElC,AAAY,qBAAC,AAAK,MAAC,AAAI;AACrB,AAAI,kBAAE,AAAkB;AACxB,AAAG;AAEC,AAAM,wBAAE,AAAY;AACpB,AAA8E;AAC9E,AAAO,yBAAE,AAAmB,6DAAC,AAAM,QAAE,AAAE,KAAG,AAAI,OAAG,AAAI,AAAC,AACvD,AACF,AACF,AAAC,AACJ;AAPM,aADG;AAFiB;AAUzB;AAEK,AAAgB,oBAAtB,AAAK,CAAkB,AAAiC;;;;AACtD,kBAAM,AAAU,+CAAC,AAAS,UAAC,AAAgB,iBAAC,AAAI,AAAC,AAAI,YAAE,AAAY,AAAC;AAEpE,AAAE,AAAC,gBAAC,AAAY,aAAC,AAAY,AAAC,cAAC,AAAC;AAC9B,AAAY,6BAAC,AAAO,QAAC,AAAI;AACvB,AAAQ,AAAE,8BAAmC,AAC9C,AAAC,AAAC;AAFwC,iBAAjB,AAAI,AAAY;AAI1C,AAA0F;AAC1F,AAAY,6BAAC,AAAO,QAAC,AAAI;AACvB,AAAM,4BAAE,AAAgE;AACxE,AAAI,0BAAE,AAAO;AACb,AAAG,yBAAE,AAAI;AACT,AAAS,+BAAE,AAAI,AAChB,AAAC,AAAC;AALwC,iBAAjB,AAAI,AAAY;AAM1C,AAAM,AACR;AAAC;AAED,AAAY,yBAAC,AAAU,WAAC,AAAI,KAAC,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAA+B,AAAC,AAAC;AACnF,kBAAM,AAAY,eAAG,MAAM,AAAoB,kDAAC,CAAC,AAAc,gBAAE,AAAc,AAAC,iBAAE,AAAI,MAAC,AAAI,KAAC,AAAY,aAAC,AAAU,YAAE,AAAU,AAAC,AAAC;AACjI,AAAE,AAAC,gBAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AACzB,AAAY,6BAAC,AAAU,WAAC,AAAI,KAAC,AAAY,AAAC,AAC5C;AAAC,AACH;;AAAC,AACF","sourcesContent":["import * as path from \"path\"\nimport { BannerPlugin, DefinePlugin } from \"webpack\"\nimport { WebpackConfigurator } from \"../main\"\nimport { getFirstExistingFile } from \"../util\"\nimport { BaseTarget, configureFileLoader } from \"./BaseTarget\"\n\nexport class MainTarget extends BaseTarget {\n  constructor() {\n    super()\n  }\n\n  configureRules(configurator: WebpackConfigurator): void {\n    super.configureRules(configurator)\n\n    configurator.rules.push({\n      test: /\\.(png|jpg|gif)$/,\n      use: [\n        {\n          loader: \"url-loader\",\n          // to avoid any issues related to asar, embed any image up to 10MB as data url\n          options: configureFileLoader(\"imgs\", 10 * 1024 * 1024),\n        }\n      ]\n    })\n  }\n\n  async configurePlugins(configurator: WebpackConfigurator): Promise<void> {\n    await BaseTarget.prototype.configurePlugins.call(this, configurator)\n\n    if (configurator.isProduction) {\n      configurator.plugins.push(new DefinePlugin({\n        __static: `process.resourcesPath + \"/static\"`\n      }))\n\n      // do not add for main dev (to avoid adding to hot update chunks), our main-hmr install it\n      configurator.plugins.push(new BannerPlugin({\n        banner: 'require(\"source-map-support/source-map-support.js\").install();',\n        test: /\\.js$/,\n        raw: true,\n        entryOnly: true,\n      }))\n      return\n    }\n\n    configurator.entryFiles.push(path.join(__dirname, \"../electron-main-hmr/main-hmr\"))\n    const devIndexFile = await getFirstExistingFile([\"index.dev.ts\", \"index.dev.js\"], path.join(configurator.projectDir, \"src/main\"))\n    if (devIndexFile != null) {\n      configurator.entryFiles.push(devIndexFile)\n    }\n  }\n}"]}
